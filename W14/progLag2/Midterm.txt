1)
a)

import java.util.*;

public class Set {
  private ArrayList<Object> s;

  Set() {
    this.s = new ArrayList<Object>();
  }

  public boolean member(Object e) {
    for (int i=0; i<this.s.size(); i++) {
         if (this.s.get(i) == e) {
           return true;
         }
     }
    return false;
  }

  public void insert(Object e) {
    for (int i=0; i<this.s.size(); i++) {
        if (this.s.get(i) == e) {
            this.s.add(e);
        }
	}
  }

 public void remove(Object e) {
    for (int i=0; i<this.s.size(); i++) {
         if (this.s.get(i) == e) {
           this.s.remove(i);
         }
    }
  }
}

b) 

data Set a = Empty | Set [a]
    deriving (Show,Eq)

member e Empty = False
member e (Set xs) = elem e xs

insert e (Set xs)
    | member e (Set xs) == True = Set xs
    | otherwise = Set (e:xs)

remove e Empty = Empty
remove e (Set xs) = Set (filter (==e) xs)

2) Change the definition of Eq.

instance Eq a => Eq (Set a) where
s == t = subset s t && subset t s

subset (Set ss) t = all (member t) ss

3) You need the qualified type of Eq for the set implementation.

4) 1: RBT B RB_E 1 RB_E

2: RBT B RB_E 1 (RBT R RB_E 2 RB_E)
	
3: RBT B (RBT B RB_E 1 RB_E) 2 (RBT B RB_E 3 RB_E)

4: RBT B (RBT B RB_E 1 RB_E) 2 (RBT B RB_E 3 (RBT R RB_E 4 RB_E))

5: RBT B (RBT B RB_E 1 RB_E) 2 (RBT R (RBT B RB_E 3 RB_E) 4 (RBT B RB_E 5 RB_E))

6: RBT B (RBT B RB_E 1 RB_E) 2 (RBT R (RBT B RB_E 3 RB_E) 4 (RBT B RB_E 5 (RBT R RB_E 6 RB_E)))

7: RBT B (RBT B (RBT B RB_E 1 RB_E) 2 (RBT B RB_E 3 RB_E)) 4 (RBT B (RBT B RB_E 5 RB_E) 6 (RBT B RB_E 7 RB_E))

8: RBT B (RBT B (RBT B RB_E 1 RB_E) 2 (RBT B RB_E 3 RB_E)) 4 (RBT B (RBT B RB_E 5 RB_E) 6 (RBT B RB_E 7 (RBT R RB_E 8 RB_E)))

9: RBT B (RBT B (RBT B RB_E 1 RB_E) 2 (RBT B RB_E 3 RB_E)) 4 (RBT B (RBT B RB_E 5 RB_E) 6 (RBT R (RBT B RB_E 7 RB_E) 8 (RBT B RB_E 9 RB_E)))

5) a) app list1 list2 = list1 ++ list2
	
   b) length [] = 0
	  length (x:xs) = 1 + length xs

   c) 

6) a) O(n)
   
   b) O(n)

	
 
