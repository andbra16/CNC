5.1) C
short: 2 bytes
int: 4 bytes
long: 4 bytes
float: 4 bytes
double: 8 bytes
char: 1 byte

5.2) Java: booleans are unordered and cannot be converted to an int

5.3) This is usefull because it can help make your code more clear. For example, if you want to test if a reference to an object has been initialized you must use if (myObject != null) instead of if (myObject != 0) which can be unclear as to what you are testing for.

5.5) 0.2 = 3E4CCCCC
	 0.5 = 3F000000
	 0.3 = 3E999999
	 1.0 = 3F800000

5.7) 
data Bit = B1 | B0
	deriving (Eq,Show)

int2bin :: Int -> [Bit]
int2bin 0 = [B0]
int2bin 1 = [B1]
int2bin x
	| x `mod` 2 == 0 = B0 : reverse (int2bin (x `div` 2))
	| otherwise = B1 : reverse (int2bin (x `div` 2))

5.9) Big-endian systems store the most significant byte of a word in the smallest address and the least significant byte is stored in the largest address. Little-endian systems, in contrast, store the least significant byte in the smallest address.

Intel x86 = little-endian
IBM z/Architecture = big-endian

5.14)

5.19)
